aso:
{
    type: `HG`,
    url: "http://aso.googlecode.com/hg"
}

fideo:
{
    type: `HG`,
    url: "https://fideo.googlecode.com/hg"
}

mili:
{
    type: `HG`,
    url: "https://mili.googlecode.com/hg"
}

biopp:
{
    type: `HG`,
    url: "https://biopp.googlecode.com/hg"
}

feca:
{
    type: `HG`,
    url: "https://feca.googlecode.com/hg"
}

gtest:
{
    type: `SVN`,
    url: "http://googletest.googlecode.com/svn/tags/release-1.6.0",
    executeAfter: "cp #external/gtestSConscript #projects/gtest/SConscript"
}

gmock:
{
    type: `SVN`,
    url: "http://googlemock.googlecode.com/svn/tags/release-1.6.0",
    executeAfter: "cp #external/gmockSConscript #projects/gmock/SConscript"
}

getoptpp:
{
    type: `HG`,
    url: "https://getoptpp.googlecode.com/hg"
}

"biopp-filer":
{
    type: `HG`,
    url: "https://biopp-filer.googlecode.com/hg"
}

"stl-debug":
{
    type: `HG`,
    url: "https://stl-debug.googlecode.com/hg"
}

boost:
{
    type: `WGET`,
    url: "http://hivelocity.dl.sourceforge.net/project/boost/boost/1.49.0/boost_1_49_0.tar.gz"
    executeAfter: ["mkdir #/boost",
                   "tar zxvf #projects/boost/boost_1_49_0.tar.gz -C #/boost",
                   "rm -r #projects/boost",
                   "mv #/boost/boost_1_49_0 #projects/boost/",
                   "rmdir #/boost",
                   "cp #external/boostSConscript #projects/boost/SConscript"]

}

odeint:
{
    type: `WGET`,
    url: "http://github.com/headmyshoulder/odeint-v2/tarball/master"
    executeAfter: ["mkdir #/odeint",
                   "tar zxvf #projects/odeint/master -C #/odeint",
                   "rm -r #projects/odeint",
                   "mv #/odeint/headmyshoulder-odeint-v2-* #projects/odeint",
                   "rmdir #/odeint",
                   "cp #external/odeintSConscript #projects/odeint/SConscript"]

}

"prot-filer":
{
    type: `HG`,
    url: "https://prot-filer.googlecode.com/hg"
}

xdrfile:
{
    type: `WGET`,
    url: "ftp://ftp.gromacs.org/pub/contrib/xdrfile-1.1.tar.gz"
    executeAfter: ["mkdir #/xdrfile2",
                   "tar zxvf #projects/xdrfile/xdrfile-1.1.tar.gz -C #/xdrfile2",
                   "rm -r #projects/xdrfile", 
                   "mv #/xdrfile2/xdrfile-1.1b #projects/xdrfile",
                   "rmdir #/xdrfile2",
                   "cp #external/xdrfileSConscript #projects/xdrfile/SConscript"]

}

"fudepan-sandbox":
{
    type: `HG`,
    url: "https://fudepan-sandbox.googlecode.com/hg"
}

"backbones-generator":
{ 
    type: `HG`,
    url: "https://backbones-generator.googlecode.com/hg"
}

nuca:
{
    type: `HG`,
    url: "https://code.google.com/p/nuca/"
}

"backbones-selector":
{
    type: `HG`,
    url: "http://code.google.com/p/backbones-selector/"
}

unplugged:
{
    type: `HG`,
    url: "http://code.google.com/p/unplugged/"
}

"fx-parser":
{
    type: `HG`,
    url: "http://code.google.com/p/fx-parser/"
}

visi:
{
	type: `HG`,
    url: "http://code.google.com/p/visi/"
}

visiPluginAR:
{
	type: `HG`,
  url: "http://code.google.com/p/visi.pluginar/"
}

lav:
{
  type: `HG`,
  url: "https://code.google.com/p/lav"
}

sequtils:
{
    type: `HG`,
    url: "https://sequtils.googlecode.com/hg"
}

phylopp:
{
    type: `HG`,
    url: "https://phylopp.googlecode.com/hg"
}


phyloloc:
{
    type: `HG`,
    url: "https://phyloloc.googlecode.com/hg"
}
