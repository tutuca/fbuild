<external_dependencies>
    <!-- Format of a component:

    <component
        name="ComponentName"
        type=["LIB" | "HLIB" | "PRO"]
        check="ComponentNameInTheSystem"
        deps="A,B,C"
        <installer
            distro=["UBUNTU" | "ARCH" | "*"]
            target=["PackageName" | "Url"]
            manager=["HG" | "SVN" | "WGET"] |
                    ["APT-GET" | "APTITUDE" | "PACKER" | "PACMAN" | "*"] />
        <install_checker> ShellScript </install_checker>
        <execute_after> ShellScript </execute_after>
    </component>

    Explanation:
    ============

    <component>
    name   -  It's the name the component will have in fbuild, i.e., the name you
              will use in the SConscripts when you specify the component as a
              dependency.
                                                                         (Required)
    type   -  It's the type of the component. Three types of component are allow:
              > "LIB" for statics and dynamics libraries.
              > "HLIB" for header only libraries.
              > "PRO" for programs.
                                                                         (Required)
    check  -  It's the name fbuild will use to check if the component exists.
              It has different meaning depending on the component type.
              > If type="LIB", it is the name of library used when it is link,
                i.e. the name that goes in the -l option (-lcheck).
              > If type="HLIB", it is the include name of the main component of
                the library, i.e. the name used in the #include macro
                (#include<check>).
              > If type="PRO", it is the name of the executable file, i.e. the
                name you use when you call the program from the shell.
              If this value is not supplied fbuild assumes check=name.
                                                                         (Optional)
    deps   -  The list of the components from which this component depends.
              It's a comma separate string, without empty paces.
                                                                         (Optional)
    <installer>
        The installer specifies how to install the component.
    distro  -  Specify under which distribution this installer must be run. fbuild
               supports tow distributions: "UBUNTU" and "ARCH".
               If the installer can be executed in both distributions you can use
               "*" as value.
    target  -  This is the name of what needs to be download/install. Depending on
               the manager type, it can be a package's name or an url.
    manager -  This is the program that will download/install the component. The
               managers fbuild supports are the following:
               * For web download:
                   > "WGET"
               * For repository checkout:
                   > "SVN"
                   > "HG"
               * For packages:
                   > "APTITUDE"
                   > "APT-GET"
                   > "PACMAN"
                   > "PACKER"
               If the target is a package and you don't know what package manager
               to use, you can let fbuild chose one for you by using the value "*".
               Be aware that if the target is not a package name it will cause
               problems.

    <install_checker>
        If you don't want let fbuild to check whether a component is installed, you
        can specify your own way to do it. In this tag you can write a shell script
        to check if the component is installed or not. fbuild use the result of the
        last executed command to decide if the component is in the system, 0 means
        TRUE (installed), anything else means FALSE (not installed).
                                                                         (Optional)

    <execute_after>
        In this tag you can put shell script that will be executed immediately
        after the component is download/checkout. This was specially design for
        those components that after being download need to be unpack or compile.
                                                                         (Optional)

    IMPORTANT:
        Please maintain alphabetical order based on name to ease maintenance -->


    <component name="bison" type="PRO">
        <installer distro="*" target="bison" manager="*"/>
    </component>

    <component name="boost_thread" type="LIB">
        <installer distro="UBUNTU" target="libboost-thread-dev" manager="APT-GET"/>
        <installer distro="ARCH" target="boost" manager="PACKER"/>
    </component>

    <component name="boost_regex" type="LIB">
        <installer distro="UBUNTU" target="libboost-regex-dev" manager="APT-GET"/>
        <installer distro="ARCH" target="boost" manager="PACKER"/>
    </component>

    <component name="boost_system" type="LIB">
        <installer distro="UBUNTU" target="libboost-system-dev" manager="APT-GET"/>
        <installer distro="ARCH" target="boost" manager="PACKER"/>
    </component>

    <component name="dos2unix" type="PRO">
        <installer distro="*" target="dos2unix" manager="*"/>
    </component>

    <component name="expat" type="LIB">
        <installer distro="UBUNTU" target="libexpat-dev" manager="APT-GET"/>
        <installer distro="ARCH" target="expat" manager="PACKER"/>
    </component>

    <component name="flex" type="PRO">
        <installer distro="*" target="flex" manager="*"/>
    </component>

    <component name="gcc_plugin" type="HLIB">
        <installer distro="UBUNTU" target="gcc-4.6-plugin-dev" manager="APT-GET"/>
        <installer distro="ARCH" target="boost" manager="PACKER"/>
          <install_checker> stat -f /usr/lib/gcc/x86_64-linux-gnu/4.6/plugin/include/gcc-plugin.h</install_checker>
    </component>

    <component name="gcc_plugin_4.7" type="HLIB">
        <installer distro="UBUNTU" target="gcc-4.7-plugin-dev" manager="APT-GET"/>
        <installer distro="ARCH" target="boost" manager="PACKER"/>
          <install_checker>stat -f /usr/lib/gcc/x86_64-linux-gnu/4.7/plugin/include/gcc-plugin.h</install_checker>
    </component>

    <component name="gettext" type="HLIB">
        <installer distro="UBUNTU" target="gettext" manager="APT-GET"/>
        <installer distro="ARCH" target="boost" manager="PACKER"/>
        <install_checker>stat -f /usr/lib/gettext/project-id</install_checker>
    </component>

    <component name="freetype" type="PRO">
        <installer distro="UBUNTU" target="libfreetype6-dev" manager="APT-GET"/>
        <install_checker>dpkg -s libfreetype6-dev</install_checker>
    </component>

    <component name="gmock" type="LIB" deps="gtest,pthread">
        <installer
            distro="*"
            target="https://googlemock.googlecode.com/svn/tags/release-1.6.0"
            manager="SVN"/>
        <execute_after>
            cd {TMP_DIR}/gmock/make; make CFLAGS={CFLAGS} CXXFLAGS={CXXFLAGS} gmock.a
            sudo mv {TMP_DIR}/gmock/make/gmock.a /usr/lib/libgmock.a
            sudo cp -r {TMP_DIR}/gmock/include/gmock /usr/include/gmock
        </execute_after>
    </component>

    <component name="gmock_main" type="LIB" deps="gmock">
        <installer
            distro="*"
            target="https://googlemock.googlecode.com/svn/tags/release-1.6.0"
            manager="SVN"/>
        <execute_after>
            cd {TMP_DIR}/gmock_main/make; make gmock_main.a
            sudo mv {TMP_DIR}/gmock_main/make/gmock_main.a /usr/lib/libgmock_main.a
        </execute_after>
    </component>

    <component name="gomp" type="LIB">
        <installer distro="UBUNTU" target="libgomp" manager="APT-GET"/>
        <installer distro="ARCH" target="libgomp" manager="PACKER"/>
    </component>

    <component name="gtest" type="LIB" deps="pthread">
        <installer
            distro="*"
            target="https://googletest.googlecode.com/svn/tags/release-1.6.0"
            manager="SVN" />
        <execute_after>
            cd {TMP_DIR}/gtest/make; make gtest.a
            sudo mv {TMP_DIR}/gtest/make/gtest.a /usr/lib/libgtest.a
            sudo cp -r {TMP_DIR}/gtest/include/gtest /usr/include/gtest
        </execute_after>
    </component>
    
    <component name="gtest_main" type="LIB" deps="gtest">
        <installer
            distro="*"
            target="https://googletest.googlecode.com/svn/tags/release-1.6.0"
            manager="SVN" />
        <execute_after>
            cd {TMP_DIR}/gtest_main/make; make gtest_main.a
            sudo mv {TMP_DIR}/gtest_main/make/gtest_main.a /usr/lib/libgtest_main.a
        </execute_after>
    </component>
 
    <component  name="maxima"  type="PRO">
        <installer distro="*" target="maxima" manager="*"/>
    </component>

    <component name="ncurses" type="LIB">
        <installer distro="UBUNTU" target="libncurses5-dev" manager="APT-GET"/>
        <installer distro="ARCH" target="ncurses" manager="PACKER"/>
    </component>

    <component name="odeint" type="HLIB" check="boost/numeric/odeint.hpp"
               deps="boost_system,boost_thread">
        <installer
            distro="UBUNTU"
            target="http://github.com/headmyshoulder/odeint-v2/tarball/master"
            manager="WGET"/>
        <execute_after>
            cd ./{TMP_DIR}/odeint; tar zxvf master; mv *odeint*/* .
            sudo mkdir /usr/include/boost/numeric/
            sudo cp -r ./{TMP_DIR}/odeint/boost/numeric/* /usr/include/boost/numeric/
        </execute_after>
        <install_checker>stat -f /usr/include/boost/numeric/odeint.hpp</install_checker>
    </component>

    <component name="png" type="PRO">
        <installer distro="UBUNTU" target="libpng12-dev" manager="APT-GET"/>
        <install_checker>dpkg -s libpng12-dev</install_checker>
    </component>

    <component name="protobuf" type="LIB">
        <installer
            distro="UBUNTU"
            target="http://protobuf.googlecode.com/files/protobuf-2.5.0.tar.bz2"
            manager="WGET"/>
        <execute_after>
            cd ./{TMP_DIR}/protobuf; tar -xvjpf protobuf-2.5.0.tar.bz2
            cd ./{TMP_DIR}/protobuf/protobuf-2.5.0/; ./configure; make -j2; sudo make install
            sudo ldconfig
        </execute_after>
        <install_checker>stat -f /usr/local/lib/libprotobuf.a</install_checker>
    </component>

    <component name="rsync" type="PRO">
        <installer distro="*" target="rsync" manager="*"/>
    </component>

    <component name="SDL" type="LIB" deps="loog-ppl0,xext">
        <installer
            distro="*"
            target="https://200.69.202.173:5555/usvn/svn/UCP-Invap/trunk/libs/SDL-1.2.15"
            manager="SVN"/>
        <execute_after>
            cd ./{TMP_DIR}/SDL; ./configure --enable-audio=no CFLAGS="-O3 -march=corei7-avx -mtune=corei7-avx -floop-parallelize-all -fprefetch-loop-arrays"; make -j8; sudo make install
        </execute_after>
        <install_checker>stat -f /usr/local/lib/libSDL.so</install_checker>
    </component>

    <component name="SDL_gfx" type="LIB" deps="SDL">
        <installer
            distro="*"
            target="http://www.ferzkopp.net/Software/SDL_gfx-2.0/SDL_gfx-2.0.24.tar.gz"
            manager="WGET"/>
        <execute_after>
            cd ./{TMP_DIR}/SDL_gfx; tar xvzf SDL_gfx-2.0.24.tar.gz; cd SDL_gfx-2.0.24; ./configure CFLAGS="-O3 -march=corei7-avx -mtune=corei7-avx -floop-parallelize-all -fprefetch-loop-arrays"; make -j8; sudo make install
        </execute_after>
        <install_checker>stat -f /usr/local/lib/libSDL_gfx.so</install_checker>
    </component>


    <component name="SDL_image" type="LIB" deps="SDL,png">
        <installer
            distro="*"
            target="http://www.libsdl.org/projects/SDL_image/release/SDL_image-1.2.12.tar.gz"
            manager="WGET"/>
        <execute_after>
            cd ./{TMP_DIR}/SDL_image; tar xvzf SDL_image-1.2.12.tar.gz; cd SDL_image-1.2.12; ./configure CFLAGS="-O3 -march=corei7-avx -mtune=corei7-avx -floop-parallelize-all -fprefetch-loop-arrays"; make -j8; sudo make install
        </execute_after>
        <install_checker>stat -f /usr/local/lib/libSDL_image.so</install_checker>
    </component>

    <component name="SDL_ttf" type="LIB" deps="SDL,freetype">
        <installer
            distro="*"
            target="http://www.libsdl.org/projects/SDL_ttf/release/SDL_ttf-2.0.11.tar.gz"
            manager="WGET"/>
        <execute_after>
            cd ./{TMP_DIR}/SDL_ttf; tar xvzf SDL_ttf-2.0.11.tar.gz; cd SDL_ttf-2.0.11; ./configure CFLAGS="-O3 -march=corei7-avx -mtune=corei7-avx -floop-parallelize-all -fprefetch-loop-arrays"; make -j8; sudo make install
        </execute_after>
        <install_checker>stat -f /usr/local/lib/libSDL_ttf.so</install_checker>
    </component>

    <component name="ttf-dejavu" type="PRO">
        <installer distro="UBUNTU" target="ttf-dejavu" manager="APT-GET"/>
        <installer distro="ARCH" target="ttf-dejavu" manager="PACKER"/>
        <install_checker>stat -f /usr/share/fonts/truetype/ttf-dejavu/DejaVuSans.ttf</install_checker>
    </component>

    <component name="ttf-ubuntu-family" type="PRO">
        <installer distro="UBUNTU" target="ttf-ubuntu-font-family" manager="APT-GET"/>
        <install_checker>stat -f /usr/share/fonts/truetype/ubuntu-font-family/UbuntuMono-R.ttf</install_checker>
    </component>

    <component name="xdrfile" type="LIB">
        <installer
            distro="*"
            target="ftp://ftp.gromacs.org/pub/contrib/xdrfile-1.1.tar.gz"
            manager="WGET"/>
        <execute_after>
            cd ./{TMP_DIR}/xdrfile; tar zxvf xdrfile-1.1.tar.gz
            mv ./{TMP_DIR}/xdrfile/xdrfile-1.1b/* ./{TMP_DIR}/xdrfile/
            cd ./{TMP_DIR}/xdrfile; ./configure CFLAGS={CFLAGS} CXXFLAGS={CXXFLAGS} --bindir=/usr/bin --libdir=/usr/lib --includedir=/usr/include
            cd ./{TMP_DIR}/xdrfile; make; sudo make install
        </execute_after>
    </component>

    <component name="loog-ppl0" type="PRO">
        <installer distro="UBUNTU" target="libcloog-ppl0" manager="APT-GET"/>
        <install_checker>dpkg -s libcloog-ppl0</install_checker>
    </component>

    <component name="jrtp" type="LIB">
        <installer
            distro="*"
            target="https://200.69.202.173:5555/usvn/svn/UCP-Invap/trunk/libs/jrtplib-3.9.1"
            manager="SVN"/>
        <execute_after>
            cd ./{TMP_DIR}/jrtp; cmake .; make -j4; sudo make install; make clean; sudo ldconfig
        </execute_after>
        <install_checker>stat -f /usr/local/lib/libjrtp.a</install_checker>
    </component>

    <component name="xext" type="PRO">
        <installer distro="UBUNTU" target="libxext-dev" manager="APT-GET"/>
        <install_checker>dpkg -s libxext-dev</install_checker>
    </component>

    <component name="proj" type="LIB">
        <installer distro="UBUNTU" target="libproj-dev" manager="APT-GET"/>
        <install_checker>dpkg -s libproj-dev</install_checker>
    </component>

    <component name="zip" type="PRO">
        <installer distro="*" target="zip" manager="*"/>
    </component>

    <component name="rt" type="LIB"/>

    <component name="ana" type="LIB" deps="cmake,boost_system,boost_thread">
        <installer
            distro="*"
            target="http://ana-net.googlecode.com/svn/trunk/"
            manager="SVN"/>
        <execute_after>
            cd {TMP_DIR}/ana; cmake src; make; sudo make install
        </execute_after>
        <install_checker>stat -f /usr/local/lib/libana.so</install_checker>
    </component>   

    <component name="cmake" type="PRO">
        <installer distro="UBUNTU" target="cmake" manager="APT-GET"/>
        <installer distro="ARCH" target="cmake" manager="PACKER"/>
    </component>

</external_dependencies>
