# FuDePan boilerplate required here

import os
import sys
import SCons

WS_PATH = os.getcwd()

BUILD_SCRIPTS_DIR = os.path.join(WS_PATH, "buildscripts")
sys.path.append(BUILD_SCRIPTS_DIR)

# Add parallelism to the build system
from multiprocessing import cpu_count
SetOption('num_jobs', cpu_count() + 1)

env = Environment()
Export('env')

# Add variables, this variables can be introduced through a file or
# can be introduced via command line
vars = Variables('SConfig')
vars.AddVariables(
    PathVariable(
        'BUILD_DIR',
        'build directory',
        os.path.join(WS_PATH, "build"),
        PathVariable.PathIsDirCreate))
vars.AddVariables(
    PathVariable(
        'INSTALL_DIR',
        'install directory',
        os.path.join(WS_PATH, "install"),
        PathVariable.PathIsDirCreate))

env.Append( LINKFLAGS = Split('-z origin') )
env.Append( RPATH = os.path.join(WS_PATH, "install"))

vars.Update(env)

env.Decider( 'MD5-timestamp' )
env.SConsignFile()

import termcolor
env['CXXCOMSTR'] = termcolor.compile_source_message
env['CCCOMSTR'] = termcolor.compile_source_message
env['SHCCCOMSTR'] = termcolor.compile_shared_source_message
env['SHCXXCOMSTR'] = termcolor.compile_shared_source_message
env['ARCOMSTR'] = termcolor.link_library_message
env['RANLIBCOMSTR'] = termcolor.ranlib_library_message
env['SHLINKCOMSTR'] = termcolor.link_shared_library_message
env['LINKCOMSTR'] = termcolor.link_program_message
env['JARCOMSTR'] = termcolor.java_library_message
env['JAVACCOMSTR'] = termcolor.compile_source_message

from SCons.Script.SConscript import SConsEnvironment
from component import AddComponent
SConsEnvironment.AddComponent = AddComponent
from component import CreateProgram
SConsEnvironment.CreateProgram = CreateProgram
from component import CreateStaticLibrary
SConsEnvironment.CreateStaticLibrary = CreateStaticLibrary
from component import CreateSharedLibrary
SConsEnvironment.CreateSharedLibrary = CreateSharedLibrary

# walk all the paths looking for SConscript files
from component import WalkDirsForComponents
WalkDirsForComponents(env, topdir=WS_PATH)

