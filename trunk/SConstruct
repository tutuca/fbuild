# FuDePan boilerplate required here

import os
import sys
import SCons

env = Environment()
Export('env')

# Get the scons root path, this can be tricky because 
# scons can be ran with the -v option
WS_PATH = env.Dir('#').abspath

# Add the script paths so is easier to find the py modules
BUILD_SCRIPTS_DIR = os.path.join(WS_PATH, "site_scons")
sys.path.append(BUILD_SCRIPTS_DIR)

# SCons configuration options
# Add parallelism to the build system
from multiprocessing import cpu_count
SetOption('num_jobs', cpu_count() + 1)

# Add variables, this variables can be introduced through a file or
# can be introduced via command line
vars = Variables('SConfig')
vars.AddVariables(
    PathVariable(
        'BUILD_DIR',
        'build directory',
        os.path.join(WS_PATH, "build"),
        PathVariable.PathIsDirCreate))
vars.AddVariables(
    PathVariable(
        'INSTALL_DIR',
        'install directory',
        os.path.join(WS_PATH, "install"),
        PathVariable.PathIsDirCreate))
vars.Update(env)

# Resolve the rpath so everything works smooth from
# the install dir. This makes easier to deploy somewhere
# else, you only need to pass INSTALL_DIR parameter to 
# scons to deploy it somewhere else
env.Append( RPATH = env['INSTALL_DIR'] )
env['ENV']['LD_LIBRARY_PATH'] = env['INSTALL_DIR']

# Some environment tunnings so this runs faster
env.Decider( 'MD5-timestamp' )
env.SConsignFile()

# Linker options
import platform
(arch,binType) = platform.architecture()
if arch == '64bit' and binType == 'ELF':
    env['CXXFLAGS'] = '-fPIC'

# Wrapper functions to build target types
from SCons.Script.SConscript import SConsEnvironment
import component
SConsEnvironment.CreateProgram = component.CreateProgram
SConsEnvironment.CreateStaticLibrary = component.CreateStaticLibrary
SConsEnvironment.CreateSharedLibrary = component.CreateSharedLibrary

# Register builders
# Register tools
env.Tool('doxygen')
env.Tool('makebuilder')

# Add Qt
import qtutil
# /usr/include/qt4/
env.Tool('qt')
qtutil.addQtComponents(env)

# Color pretty printing
import termcolor
if ARGUMENTS.get('VERBOSE') != '1':
    termcolor.prettyMessages(env)

# Walk over the tree finding components
from component import WalkDirsForComponents
WalkDirsForComponents(env, topdir=WS_PATH)
   
